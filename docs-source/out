diff --git a/docs-source/content/faq/namespace-management.md b/docs-source/content/faq/namespace-management.md
index 904d24161..ae03986b8 100644
--- a/docs-source/content/faq/namespace-management.md
+++ b/docs-source/content/faq/namespace-management.md
@@ -161,7 +161,7 @@ Note that `domain1` is the name of the domain in the following example output.
 Events:
   Type     Reason                 Age               From               Message
   ----     ------                 ----              ----               -------
-  Normal   Scheduled              1m                default-scheduler  Successfully assigned domain1-introspect-domain-job-bz6rw to slc16ffk
+  Normal   Scheduled              1m                default-scheduler  Successfully assigned domain1-introspector-bz6rw to slc16ffk
 
   Normal   SuccessfulMountVolume  1m                kubelet, slc16ffk  MountVolume.SetUp succeeded for volume "weblogic-credentials-volume"
 
diff --git a/docs-source/content/faq/oci-lb.md b/docs-source/content/faq/oci-lb.md
index c840888a8..535df049b 100644
--- a/docs-source/content/faq/oci-lb.md
+++ b/docs-source/content/faq/oci-lb.md
@@ -79,7 +79,7 @@ but initially the external IP is shown as `<pending>`.
 $ kubectl -n bob get svc
 NAME                                   TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                       AGE
 bobs-bookstore-admin-server            ClusterIP      None            <none>        8888/TCP,7001/TCP,30101/TCP   9d
-bobs-bookstore-admin-server-external   NodePort       10.96.224.13    <none>        7001:32401/TCP                9d
+bobs-bookstore-admin-server-ext        NodePort       10.96.224.13    <none>        7001:32401/TCP                9d
 bobs-bookstore-cluster-cluster-1       ClusterIP      10.96.86.113    <none>        8888/TCP,8001/TCP,31111/TCP   9d
 bobs-bookstore-managed-server1         ClusterIP      None            <none>        8888/TCP,8001/TCP,31111/TCP   9d
 bobs-bookstore-managed-server2         ClusterIP      None            <none>        8888/TCP,8001/TCP,31111/TCP   9d
@@ -93,7 +93,7 @@ external IP address will be displayed:
 $ kubectl -n bob get svc
 NAME                                   TYPE           CLUSTER-IP      EXTERNAL-IP       PORT(S)                       AGE
 bobs-bookstore-admin-server            ClusterIP      None            <none>            8888/TCP,7001/TCP,30101/TCP   9d
-bobs-bookstore-admin-server-external   NodePort       10.96.224.13    <none>            7001:32401/TCP                9d
+bobs-bookstore-admin-server-ext        NodePort       10.96.224.13    <none>            7001:32401/TCP                9d
 bobs-bookstore-cluster-cluster-1       ClusterIP      10.96.86.113    <none>            8888/TCP,8001/TCP,31111/TCP   9d
 bobs-bookstore-managed-server1         ClusterIP      None            <none>            8888/TCP,8001/TCP,31111/TCP   9d
 bobs-bookstore-managed-server2         ClusterIP      None            <none>            8888/TCP,8001/TCP,31111/TCP   9d
diff --git a/docs-source/content/samples/simple/azure-kubernetes-service/_index.md b/docs-source/content/samples/simple/azure-kubernetes-service/_index.md
index d5785f139..5ef52e931 100644
--- a/docs-source/content/samples/simple/azure-kubernetes-service/_index.md
+++ b/docs-source/content/samples/simple/azure-kubernetes-service/_index.md
@@ -630,7 +630,7 @@ Now that we have created the AKS cluster, installed the operator, and verified t
    apiVersion: v1
    kind: Service
    metadata:
-     name: domain1-admin-server-external-lb
+     name: domain1-admin-server-ext-lb
      namespace: default
    spec:
      ports:
@@ -655,7 +655,7 @@ Now that we have created the AKS cluster, installed the operator, and verified t
 
    ```bash
    $ kubectl apply -f ~/azure/weblogic-on-aks/admin-lb.yaml
-   service/domain1-admin-server-external-lb created
+   service/domain1-admin-server-ext-lb created
    ```
 
    Use the configuration file in `~/azure/weblogic-on-aks/cluster-lb.yaml` to create a load balancer service for the managed servers. The following content is an example of `cluster-lb.yaml`, with default domain UID `domain1`, cluster name `cluster-1`, and default managed server port `8001`.
@@ -689,7 +689,7 @@ Now that we have created the AKS cluster, installed the operator, and verified t
 
    ```bash
    $ kubectl  apply -f ~/azure/weblogic-on-aks/cluster-lb.yaml
-   service/domain1-cluster-1-external-lb created
+   service/domain1-cluster-1-ext-lb created
    ```
 
    After a short time, you will see the Administration Server and Managed Servers running. 
@@ -735,8 +735,8 @@ Now that we have created the AKS cluster, installed the operator, and verified t
    $ kubectl get svc --watch
    NAME                               TYPE           CLUSTER-IP    EXTERNAL-IP      PORT(S)              AGE
    domain1-admin-server               ClusterIP      None          <none>           30012/TCP,7001/TCP   2d20h
-   domain1-admin-server-external      NodePort       10.0.182.50   <none>           7001:30701/TCP       2d20h
-   domain1-admin-server-external-lb   LoadBalancer   10.0.67.79    52.188.176.103   7001:32227/TCP       2d20h
+   domain1-admin-server-ext      NodePort       10.0.182.50   <none>           7001:30701/TCP       2d20h
+   domain1-admin-server-ext-lb   LoadBalancer   10.0.67.79    52.188.176.103   7001:32227/TCP       2d20h
    domain1-cluster-1-lb               LoadBalancer   10.0.112.43   104.45.176.215   8001:30874/TCP       2d17h
    domain1-cluster-cluster-1          ClusterIP      10.0.162.19   <none>           8001/TCP             2d20h
    domain1-managed-server1            ClusterIP      None          <none>           8001/TCP             2d20h
@@ -856,9 +856,9 @@ Next you will need to start the application:
 After the successful deployment, go to the application through the domain1-cluster-1-lb external IP.
 
 ```bash
-$ kubectl  get svc domain1-cluster-1-external-lb
+$ kubectl  get svc domain1-cluster-1-ext-lb
 NAME                            TYPE           CLUSTER-IP     EXTERNAL-IP     PORT(S)          AGE
-domain1-cluster-1-external-lb   LoadBalancer   10.0.108.249   52.224.248.40   8001:32695/TCP   30m
+domain1-cluster-1-ext-lb   LoadBalancer   10.0.108.249   52.224.248.40   8001:32695/TCP   30m
 ```
 
 In the example, the application address is: `http://52.224.248.40:8001/testwebapp`.
@@ -933,8 +933,8 @@ The logs are stored in the Azure file share. Follow these steps to access the lo
    $ kubectl get svc
    NAME                               TYPE           CLUSTER-IP    EXTERNAL-IP     PORT(S)              AGE
    domain1-admin-server               ClusterIP      None          <none>          30012/TCP,7001/TCP   7m3s
-   domain1-admin-server-external      NodePort       10.0.78.211   <none>          7001:30701/TCP       7m3s
-   domain1-admin-server-external-lb   LoadBalancer   10.0.6.144    40.71.233.81    7001:32758/TCP       7m32s
+   domain1-admin-server-ext           NodePort       10.0.78.211   <none>          7001:30701/TCP       7m3s
+   domain1-admin-server-ext-lb        LoadBalancer   10.0.6.144    40.71.233.81    7001:32758/TCP       7m32s
    domain1-cluster-1-lb               LoadBalancer   10.0.29.231   52.142.39.152   8001:31022/TCP       7m30s
    domain1-cluster-cluster-1          ClusterIP      10.0.80.134   <none>          8001/TCP             1s
    domain1-managed-server1            ClusterIP      None          <none>          8001/TCP             1s
diff --git a/docs-source/content/samples/simple/domains/domain-home-on-pv/_index.md b/docs-source/content/samples/simple/domains/domain-home-on-pv/_index.md
index 76efd6dd2..d876a3f5a 100644
--- a/docs-source/content/samples/simple/domains/domain-home-on-pv/_index.md
+++ b/docs-source/content/samples/simple/domains/domain-home-on-pv/_index.md
@@ -397,7 +397,7 @@ Here is an example of the output of this command:
 $ kubectl get services
 NAME                                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)           AGE
 domain1-admin-server                        ClusterIP   10.96.206.134    <none>        7001/TCP          23m
-domain1-admin-server-external               NodePort    10.107.164.241   <none>        30012:30012/TCP   22m
+domain1-admin-server-ext                    NodePort    10.107.164.241   <none>        30012:30012/TCP   22m
 domain1-cluster-cluster-1                   ClusterIP   10.109.133.168   <none>        8001/TCP          22m
 domain1-managed-server1                     ClusterIP   None             <none>        8001/TCP          22m
 domain1-managed-server2                     ClusterIP   None             <none>        8001/TCP          22m
diff --git a/docs-source/content/samples/simple/domains/fmw-domain/_index.md b/docs-source/content/samples/simple/domains/fmw-domain/_index.md
index 768a792f2..4b4b36b96 100644
--- a/docs-source/content/samples/simple/domains/fmw-domain/_index.md
+++ b/docs-source/content/samples/simple/domains/fmw-domain/_index.md
@@ -450,7 +450,7 @@ Here is an example of the output of this command:
 $ kubectl get services
 NAME                                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)           AGE
 fmw-domain-admin-server             ClusterIP   None             <none>        7001/TCP          15h
-fmw-domain-admin-server-external    NodePort    10.101.26.42     <none>        7001:30731/TCP    15h
+fmw-domain-admin-server-ext         NodePort    10.101.26.42     <none>        7001:30731/TCP    15h
 fmw-domain-cluster-cluster-1        ClusterIP   10.107.55.188    <none>        8001/TCP          15h
 fmw-domain-managed-server1          ClusterIP   None             <none>        8001/TCP          15h
 fmw-domain-managed-server2          ClusterIP   None             <none>        8001/TCP          15h
diff --git a/docs-source/content/samples/simple/domains/model-in-image/initial.md b/docs-source/content/samples/simple/domains/model-in-image/initial.md
index 1e2116eab..c3a2d9f3d 100644
--- a/docs-source/content/samples/simple/domains/model-in-image/initial.md
+++ b/docs-source/content/samples/simple/domains/model-in-image/initial.md
@@ -658,11 +658,11 @@ Copy the following to a file called `/tmp/mii-sample/mii-initial.yaml` or simila
   ```
   $ kubectl get pods -n sample-domain1-ns --watch
   NAME                                         READY   STATUS    RESTARTS   AGE
-  sample-domain1-introspect-domain-job-lqqj9   0/1   Pending   0     0s
-  sample-domain1-introspect-domain-job-lqqj9   0/1   ContainerCreating   0     0s
-  sample-domain1-introspect-domain-job-lqqj9   1/1   Running   0     1s
-  sample-domain1-introspect-domain-job-lqqj9   0/1   Completed   0     65s
-  sample-domain1-introspect-domain-job-lqqj9   0/1   Terminating   0     65s
+  sample-domain1-introspector-lqqj9   0/1   Pending   0     0s
+  sample-domain1-introspector-lqqj9   0/1   ContainerCreating   0     0s
+  sample-domain1-introspector-lqqj9   1/1   Running   0     1s
+  sample-domain1-introspector-lqqj9   0/1   Completed   0     65s
+  sample-domain1-introspector-lqqj9   0/1   Terminating   0     65s
   sample-domain1-admin-server   0/1   Pending   0     0s
   sample-domain1-admin-server   0/1   ContainerCreating   0     0s
   sample-domain1-admin-server   0/1   Running   0     1s
@@ -732,14 +732,14 @@ Alternatively, you can run `/tmp/mii-sample/utils/wl-pod-wait.sh -p 3`. This is
 
   NAME                                          VERSION  IMAGE  READY  PHASE
   --------------------------------------------  -------  -----  -----  ---------
-  'sample-domain1-introspect-domain-job-rkdkg'  ''       ''     ''     'Pending'
+  'sample-domain1-introspector-rkdkg'           ''       ''     ''     'Pending'
 
   @@ [2020-04-30T13:50:45][seconds=3] Info: '0' WebLogic Server pods currently match all criteria, expecting '3'.
   @@ [2020-04-30T13:50:45][seconds=3] Info: Introspector and WebLogic Server pods with same namespace and domain-uid:
 
   NAME                                          VERSION  IMAGE  READY  PHASE
   --------------------------------------------  -------  -----  -----  ---------
-  'sample-domain1-introspect-domain-job-rkdkg'  ''       ''     ''     'Running'
+  'sample-domain1-introspector-rkdkg'           ''       ''     ''     'Running'
 
 
   @@ [2020-04-30T13:51:50][seconds=68] Info: '0' WebLogic Server pods currently match all criteria, expecting '3'.
diff --git a/docs-source/content/samples/simple/domains/model-in-image/update1.md b/docs-source/content/samples/simple/domains/model-in-image/update1.md
index d9a4da861..7bc77216b 100644
--- a/docs-source/content/samples/simple/domains/model-in-image/update1.md
+++ b/docs-source/content/samples/simple/domains/model-in-image/update1.md
@@ -242,7 +242,7 @@ Here are the steps:
      NAME                                          VERSION  IMAGE                    READY   PHASE
      --------------------------------------------  -------  -----------------------  ------  ---------
      'sample-domain1-admin-server'                 '1'      'model-in-image:WLS-v1'  'true'  'Running'
-     'sample-domain1-introspect-domain-job-wlkpr'  ''       ''                       ''      'Pending'
+     'sample-domain1-introspector-wlkpr'           ''       ''                       ''      'Pending'
      'sample-domain1-managed-server1'              '1'      'model-in-image:WLS-v1'  'true'  'Running'
      'sample-domain1-managed-server2'              '1'      'model-in-image:WLS-v1'  'true'  'Running'
 
@@ -252,7 +252,7 @@ Here are the steps:
      NAME                                          VERSION  IMAGE                    READY   PHASE
      --------------------------------------------  -------  -----------------------  ------  ---------
      'sample-domain1-admin-server'                 '1'      'model-in-image:WLS-v1'  'true'  'Running'
-     'sample-domain1-introspect-domain-job-wlkpr'  ''       ''                       ''      'Running'
+     'sample-domain1-introspector-wlkpr'           ''       ''                       ''      'Running'
      'sample-domain1-managed-server1'              '1'      'model-in-image:WLS-v1'  'true'  'Running'
      'sample-domain1-managed-server2'              '1'      'model-in-image:WLS-v1'  'true'  'Running'
 
@@ -262,7 +262,7 @@ Here are the steps:
      NAME                                          VERSION  IMAGE                    READY   PHASE
      --------------------------------------------  -------  -----------------------  ------  -----------
      'sample-domain1-admin-server'                 '1'      'model-in-image:WLS-v1'  'true'  'Running'
-     'sample-domain1-introspect-domain-job-wlkpr'  ''       ''                       ''      'Succeeded'
+     'sample-domain1-introspector-wlkpr'           ''       ''                       ''      'Succeeded'
      'sample-domain1-managed-server1'              '1'      'model-in-image:WLS-v1'  'true'  'Running'
      'sample-domain1-managed-server2'              '1'      'model-in-image:WLS-v1'  'true'  'Running'
 
diff --git a/docs-source/content/samples/simple/domains/model-in-image/update2.md b/docs-source/content/samples/simple/domains/model-in-image/update2.md
index 608033559..a238e254d 100644
--- a/docs-source/content/samples/simple/domains/model-in-image/update2.md
+++ b/docs-source/content/samples/simple/domains/model-in-image/update2.md
@@ -309,13 +309,13 @@ Here are the steps for this use case:
    sample-domain1-admin-server      1/1     Running   0          5d2h
    sample-domain1-managed-server1   1/1     Running   1          5d2h
    sample-domain1-managed-server2   1/1     Running   2          5d2h
-   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s
-   sample-domain2-introspect-domain-job-plssr   0/1     Pending   0          0s
-   sample-domain2-introspect-domain-job-plssr   0/1     ContainerCreating   0          0s
-   sample-domain2-introspect-domain-job-plssr   1/1     Running             0          2s
-   sample-domain2-introspect-domain-job-plssr   0/1     Completed           0          69s
-   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s
-   sample-domain2-introspect-domain-job-plssr   0/1     Terminating         0          71s
+   sample-domain2-introspector-plssr   0/1     Pending   0          0s
+   sample-domain2-introspector-plssr   0/1     Pending   0          0s
+   sample-domain2-introspector-plssr   0/1     ContainerCreating   0          0s
+   sample-domain2-introspector-plssr   1/1     Running             0          2s
+   sample-domain2-introspector-plssr   0/1     Completed           0          69s
+   sample-domain2-introspector-plssr   0/1     Terminating         0          71s
+   sample-domain2-introspector-plssr   0/1     Terminating         0          71s
    sample-domain2-admin-server                  0/1     Pending             0          0s
    sample-domain2-admin-server                  0/1     Pending             0          0s
    sample-domain2-admin-server                  0/1     ContainerCreating   0          0s
@@ -352,14 +352,14 @@ Here are the steps for this use case:
 
    NAME                                          VERSION  IMAGE  READY  PHASE
    --------------------------------------------  -------  -----  -----  ---------
-   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Running'
+   'sample-domain2-introspector-plssr'           ''       ''     ''     'Running'
 
    @@ [2020-05-13T17:07:03][seconds=64] Info: '0' WebLogic Server pods currently match all criteria, expecting '3'.
    @@ [2020-05-13T17:07:03][seconds=64] Info: Introspector and WebLogic Server pods with same namespace and domain-uid:
 
    NAME                                          VERSION  IMAGE  READY  PHASE
    --------------------------------------------  -------  -----  -----  -----------
-   'sample-domain2-introspect-domain-job-plssr'  ''       ''     ''     'Succeeded'
+   'sample-domain2-introspector-plssr'           ''       ''              ''     'Succeeded'
 
    @@ [2020-05-13T17:07:06][seconds=67] Info: '0' WebLogic Server pods currently match all criteria, expecting '3'.
    @@ [2020-05-13T17:07:06][seconds=67] Info: Introspector and WebLogic Server pods with same namespace and domain-uid:
diff --git a/docs-source/content/samples/simple/domains/model-in-image/update3.md b/docs-source/content/samples/simple/domains/model-in-image/update3.md
index 83464f493..fb0a5a58e 100644
--- a/docs-source/content/samples/simple/domains/model-in-image/update3.md
+++ b/docs-source/content/samples/simple/domains/model-in-image/update3.md
@@ -235,7 +235,7 @@ Here are the steps for this use case:
    NAME                                          VERSION  IMAGE                    READY   PHASE
    --------------------------------------------  -------  -----------------------  ------  ---------
    'sample-domain1-admin-server'                 '2'      'model-in-image:WLS-v1'  'true'  'Running'
-   'sample-domain1-introspect-domain-job-g5kzn'  ''       ''                       ''      'Running'
+   'sample-domain1-introspector-g5kzn'           ''       ''                       ''      'Running'
    'sample-domain1-managed-server1'              '2'      'model-in-image:WLS-v1'  'true'  'Running'
    'sample-domain1-managed-server2'              '2'      'model-in-image:WLS-v1'  'true'  'Running'
 
diff --git a/docs-source/content/userguide/managing-domains/accessing-the-domain/wlst.md b/docs-source/content/userguide/managing-domains/accessing-the-domain/wlst.md
index d305301dc..57f59ed1b 100644
--- a/docs-source/content/userguide/managing-domains/accessing-the-domain/wlst.md
+++ b/docs-source/content/userguide/managing-domains/accessing-the-domain/wlst.md
@@ -10,13 +10,13 @@ description: "You can use the WebLogic Scripting Tool (WLST) to manage a domain
 You can use the WebLogic Scripting Tool (WLST) to manage a domain running in Kubernetes.  If the Administration Server was configured to expose a T3 channel using the `exposeAdminT3Channel` setting when creating the domain, then the matching T3 service can be used to connect.  For example, if the `domainUID` is `domain1`, and the Administration Server name is `admin-server`, then the service would be called:
 
 ```
-domain1-admin-server-external  
+domain1-admin-server-ext
 ```
 
 This service will be in the same namespace as the domain.  The external port number can be obtained by checking this service’s `nodePort`:
 
 ```
-$ kubectl get service domain1-admin-server-external -n domain1 -o jsonpath='{.spec.ports[0].nodePort}'
+$ kubectl get service domain1-admin-server-ext -n domain1 -o jsonpath='{.spec.ports[0].nodePort}'
 30012
 ```
 
diff --git a/docs-source/content/userguide/managing-domains/configoverrides/_index.md b/docs-source/content/userguide/managing-domains/configoverrides/_index.md
index 9f92b4139..1f9fcd576 100644
--- a/docs-source/content/userguide/managing-domains/configoverrides/_index.md
+++ b/docs-source/content/userguide/managing-domains/configoverrides/_index.md
@@ -373,7 +373,7 @@ By setting the `FAIL_BOOT_ON_SITUATIONAL_CONFIG_ERROR` environment variable in t
 
 * If WebLogic Server instance Pods do not come up at all, then:
   * Examine your Domain resource status: `kubectl -n MYDOMAINNAMESPACE describe domain MYDOMAIN`
-  * In the domain's namespace, see if you can find a job named `DOMAIN_UID-introspect-domain-job` and a corresponding pod named something like `DOMAIN_UID-introspect-domain-job-xxxx`.  If so, examine:
+  * In the domain's namespace, see if you can find a job named `DOMAIN_UID-introspector` and a corresponding pod named something like `DOMAIN_UID-introspector-xxxx`.  If so, examine:
       * `kubectl -n MYDOMAINNAMESPACE describe job INTROSPECTJOBNAME`
       * `kubectl -n MYDOMAINNAMESPACE logs INTROSPECTPODNAME`
   * Check your operator log for Warning/Error/Severe messages.
@@ -439,7 +439,7 @@ when `spec.logHome` is configured and `spec.logHomeEnabled` is true.
 ### Internal design flow
 
 * The operator generates the final configuration overrides, which include the merging of operator-generated overrides and the processing of any customer-provided configuration overrides templates and Secrets, during its introspection phase.
-* The operator creates a Kubernetes Job for introspection named `DOMAIN_UID-introspect-domain-job`.
+* The operator creates a Kubernetes Job for introspection named `DOMAIN_UID-introspector`.
 * The introspector Job's Pod:
   * Mounts the Kubernetes ConfigMap and Secrets specified by using the operator Domain `configuration.overridesConfigMap`, `webLogicCredentialsSecret`, and `configuration.secrets` fields.
   * Reads the mounted configuration overrides templates from the ConfigMap and expands them to create the actual configuration overrides files for the domain:
diff --git a/docs-source/content/userguide/managing-domains/domain-lifecycle/introspection.md b/docs-source/content/userguide/managing-domains/domain-lifecycle/introspection.md
index 29533ef86..9981d45ea 100644
--- a/docs-source/content/userguide/managing-domains/domain-lifecycle/introspection.md
+++ b/docs-source/content/userguide/managing-domains/domain-lifecycle/introspection.md
@@ -10,7 +10,7 @@ description: "This document describes domain introspection in the Oracle WebLogi
 This document describes domain introspection, when it occurs automatically, and how and when to initiate additional introspections of the domain configuration in the Oracle WebLogic Server in Kubernetes environment.
 
 In order to manage the operation of WebLogic domains in Kubernetes, the Oracle WebLogic Kubernetes Operator analyzes the WebLogic
-domain configuration using an "introspection" job. This Job will be named `DOMAIN_UID-introspect-domain-job`, will be run in the same namespace as the Domain, and must successfully complete before the operator will begin to start WebLogic Server instances. Because each of the
+domain configuration using an "introspection" job. This Job will be named `DOMAIN_UID-introspector`, will be run in the same namespace as the Domain, and must successfully complete before the operator will begin to start WebLogic Server instances. Because each of the
 [domain home source types]({{< relref "/userguide/managing-domains/choosing-a-model/_index.md" >}}) are different (for instance, Domain in PV uses a domain home on a PersistentVolume while Model in Image generates the domain home dynamically from a WDT model), the Pod created by this Job will be
 as similar as possible to the Pod that will later be generated for the Administration Server. This guarantees that the operator is
 analyzing the same WebLogic domain configuration that WebLogic Server instances will use.
@@ -46,7 +46,7 @@ As with `restartVersion`, the `introspectVersion` field has no required format;
 
 #### Failed introspection
 
-Sometimes the Kubernetes Job, named `DOMAIN_UID-introspect-domain-job`, created for the introspection will fail.
+Sometimes the Kubernetes Job, named `DOMAIN_UID-introspector`, created for the introspection will fail.
 
 When introspection fails, the operator will not start any WebLogic Server instances. If this is not the initial introspection and there are already WebLogic Server instances running, then a failed introspection will leave the existing WebLogic Server instances running without making any changes to the operational state of the domain.
 
diff --git a/docs-source/content/userguide/managing-domains/model-in-image/debugging.md b/docs-source/content/userguide/managing-domains/model-in-image/debugging.md
index 73ee77544..eac4a2c60 100644
--- a/docs-source/content/userguide/managing-domains/model-in-image/debugging.md
+++ b/docs-source/content/userguide/managing-domains/model-in-image/debugging.md
@@ -36,27 +36,27 @@ For example, assuming your domain UID is `sample-domain1` and your domain namesp
   $ kubectl -n sample-domain1-ns get pods -l weblogic.domainUID=sample-domain1
   NAME                                         READY   STATUS    RESTARTS   AGE
   sample-domain1-admin-server                  1/1     Running   0          19h
-  sample-domain1-introspect-domain-job-v2l7k   0/1     Error     0          75m
+  sample-domain1-introspector-v2l7k            0/1     Error     0          75m
   sample-domain1-managed-server1               1/1     Running   0          19h
   sample-domain1-managed-server2               1/1     Running   0          19h
 
   $ # let's look at the job's describe
-  $ kubectl -n sample-domain1-ns describe job/sample-domain1-introspect-domain-job
+  $ kubectl -n sample-domain1-ns describe job/sample-domain1-introspector
 
   ...
 
   $ # now let's look at the job's pod describe, in particular look at its 'events'
-  $ kubectl -n sample-domain1-ns describe pod/sample-domain1-introspect-domain-job-v2l7k
+  $ kubectl -n sample-domain1-ns describe pod/sample-domain1-introspector-v2l7k
 
   ...
 
   $ # finally let's look at job's pod's log
-  $ kubectl -n sample-domain1-ns logs job/sample-domain1-introspect-domain-job
+  $ kubectl -n sample-domain1-ns logs job/sample-domain1-introspector
 
   ...
 
   $ # alternative log command (will have same output as previous)
-  # kubectl -n sample-domain1-ns logs pod/sample-domain1-introspect-domain-job-v2l7k
+  # kubectl -n sample-domain1-ns logs pod/sample-domain1-introspector-v2l7k
   ```
 
   A common reason for the introspector job to fail is because of an error in a model file. Here's some sample log output from an introspector job that shows such a failure:
